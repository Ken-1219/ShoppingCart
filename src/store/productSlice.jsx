// Import the necessary function from Redux Toolkit
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// Create an object to define different status states
export const STATUS = Object.freeze({
    IDLE: 'idle',       // No ongoing operation
    LOADING: 'loading', // Data is being fetched
    ERROR: 'error'      // An error occurred during data fetching
});

// Create a slice using Redux Toolkit's createSlice function
const productSlice = createSlice({
    name: 'product', // Name of the slice
    initialState: {
        data: [],          // Initialize the data as an empty array
        status: STATUS.IDLE, // Initialize the status as idle while fetching data from API
    },
    reducers: {
        // // Reducer to set the fetched products into the state
        // setProducts(state, action) {
        //     // Update the state's data with the fetched products
        //     state.data = action.payload;
        // },
        // // Reducer to set the status of the data fetching process
        // setStatus(state, action) {
        //     // Update the state's status with the payload value
        //     state.status = action.payload;
        // }
    },
    extraReducers: (builder)=>{
        builder
        .addCase(fetchProducts.pending, (state, action)=>{
            state.status = STATUS.LOADING;          //Using the extra reducers and async thunk handles the dispatch operation itself and so we have to manage it from the original state of api response -> pending, fulfilled and rejected
        })
        .addCase(fetchProducts.fulfilled, (state, action)=>{
            state.data = action.payload;  //when the promise is fulfilled -> update the state
            state.status = STATUS.IDLE; 
        })
        .addCase(fetchProducts.rejected, (state, action)=>{
            state.status = STATUS.ERROR;
        })
    }
});

// Export the actions generated by the slice
export const { setProducts, setStatus } = productSlice.actions;

// Export the reducer generated by the slice  --> This is used to register this in the store
export default productSlice.reducer;

// Thunks are middleware in Redux Toolkit (built-in) that allow handling async logic
// A thunk is a function that returns an async function and takes dispatch and getState as parameters

//Thunk functions are called before the reducers to fetch the data properly

//This is to handle thunk in redux (traditional way) --> not from toolkit
// export function fetchProducts() {
//     return async function fetchProductsThunk(dispatch, getState) {
//         // Dispatch an action to set the status to 'loading' before fetching data
//         dispatch(setStatus(STATUS.LOADING));
//         try {
//             // Fetch data from the API
//             const res = await fetch("https://fakestoreapi.com/products");
//             const data = await res.json();
            
//             // Dispatch an action to update the state with the fetched products
//             dispatch(setProducts(data));
//             // Dispatch an action to set the status back to 'idle' since data fetching is complete
//             dispatch(setStatus(STATUS.IDLE));
//         } catch (err) {
//             console.log(err);
//             // Dispatch an action to set the status to 'error' if an error occurs
//             dispatch(setStatus(STATUS.ERROR));
//         }
//     };
// }


//Thunk using toolkit
export const fetchProducts = createAsyncThunk('products/fetch',async ()=>{
    const res = await fetch("https://fakestoreapi.com/products");
    const data = await res.json();
    return data;
})
